/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.KhachHang;

import BUS.ChiTietHoaDonBus;
import BUS.HoaDonBus;
import BUS.KhuyenMaiBus;
import BUS.SachBus;
import BUS.TaiKhoanBus;
import DTO.ChiTietHoaDon;
import DTO.HoaDon;
import DTO.KhachHang;
import DTO.KhuyenMai;
import DTO.TaiKhoan;
import GUI.Login.Login;
import ProcessingFunction.Other;
import ProcessingFunction.SendEmail;
import ProcessingFunction.convertMoneyToVietnameseText;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sun.java2d.d3d.D3DRenderQueue;

/**
 *
 * @author MINHTHUAN
 */
public class CartShopping extends javax.swing.JPanel {

    ArrayList<ChiTietHoaDon> dataCart = new ArrayList<>();
    private int sum = 0;
    private int num = 0;
    private int price = 0;
    KhuyenMaiBus kmbus = new KhuyenMaiBus();
    SachBus sachbus = new SachBus();
    HoaDonBus hdbus = new HoaDonBus();
    ChiTietHoaDonBus cthdbus = new ChiTietHoaDonBus();
    TaiKhoanBus tkbus = new TaiKhoanBus();
    KhachHang kh = null;

    /**
     * Creates new form CartShopping
     */
    public CartShopping() {
        initComponents();
        loadData();
    }

    public CartShopping(ArrayList<ChiTietHoaDon> data, KhachHang k) {
        initComponents();
        setDataCart(data);
        setKh(k);
        loadData();
        countPrice();
        performEvent();
    }

    public KhachHang getKh() {
        return kh;
    }

    public void setKh(KhachHang kh) {
        this.kh = kh;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        contentJScroll = new javax.swing.JScrollPane();
        sumCart = new javax.swing.JLabel();
        saleCart = new javax.swing.JLabel();
        finalPriceCast = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        readMoney = new javax.swing.JTextField();

        background.setBackground(new java.awt.Color(255, 255, 255));

        sumCart.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sumCart.setText("Tổng :");

        saleCart.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        saleCart.setText("Khuyến Mãi :");

        finalPriceCast.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        finalPriceCast.setForeground(new java.awt.Color(255, 51, 51));
        finalPriceCast.setText("Thành tiền :");

        submitBtn.setBackground(new java.awt.Color(255, 51, 51));
        submitBtn.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        submitBtn.setForeground(new java.awt.Color(255, 255, 255));
        submitBtn.setText("Đặt Hàng");

        readMoney.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        readMoney.setForeground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finalPriceCast, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saleCart, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sumCart, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(submitBtn))))
                    .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(backgroundLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(readMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 1095, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backgroundLayout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(contentJScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 1109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addComponent(contentJScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(sumCart)
                        .addGap(18, 18, 18)
                        .addComponent(saleCart))
                    .addComponent(submitBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finalPriceCast)
                .addGap(18, 18, 18)
                .addComponent(readMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JScrollPane contentJScroll;
    private javax.swing.JLabel finalPriceCast;
    private javax.swing.JTextField readMoney;
    private javax.swing.JLabel saleCart;
    private javax.swing.JButton submitBtn;
    private javax.swing.JLabel sumCart;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        
        Container con = new Container();
        for (ChiTietHoaDon ct : dataCart) {
            JPanel p = new contentDetailCart(ct);
            p.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
            con.add(p);
        }
        con.setLayout(new BoxLayout(con, BoxLayout.Y_AXIS));
        contentJScroll.getViewport().setView(con);
    }

    public ArrayList<ChiTietHoaDon> getDataCart() {
        return dataCart;
    }

    public void setDataCart(ArrayList<ChiTietHoaDon> dataCart) {
        this.dataCart = dataCart;
    }

    private void countPrice() {
        int sum = 0;
        for (Component c : contentJScroll.getComponents()) {
            if (c instanceof JViewport) {
                for (Component c1 : ((JViewport) c).getComponents()) {
                    if (c1 instanceof Container) {
                        for (Component c2 : ((Container) c1).getComponents()) {
                            if (c2 instanceof JPanel) {
                                int price = 0;
                                int num = 0;
                                int decrease = 0;
                                for (Component c3 : ((JPanel) c2).getComponents()) {
                                    if (c3 instanceof JLabel) {
                                        String value = Other.convertTextToEnglish(((JLabel) c3).getText());
                                        if (value.contains("giasach")) {
                                            price = getValueFormRightString(value);
                                        } else if (value.contains("phantram")) {
                                            //Get sale of book
                                            decrease = getValueFormRightString(value);
                                            
                                        }
                                    } else if (c3 instanceof JSpinner) {
                                        num = Integer.valueOf(String.valueOf(((JSpinner) c3).getValue()));
                                    }
                                }
                                sum += (int) (price * num * (1 - decrease / 100.0));
                            }
                        }
                    }
                }
            }
        }
        sumCart.setText("Tổng tiền : " + Other.convetNumberToMoney(String.valueOf(sum)) + "VNĐ");
        
        ArrayList<KhuyenMai> dataKM = kmbus.getAllData();
        int decreaseSale = 0;
        for (KhuyenMai km : dataKM) {
            if (km.getNgayApDung().toString().substring(5).compareTo(LocalDate.now().toString().substring(5)) == 0) {
                decreaseSale = km.getPhanTramGiam();
            }
        }
        saleCart.setText("Khuyến mãi : " + decreaseSale + "%");
        finalPriceCast.setText("Thành Tiền : "
                + Other.convetNumberToMoney(String.valueOf((int) (sum * (1 - decreaseSale / 100.0))))
                + "("
                + Other.convetNumberToMoney(String.valueOf((int) (sum)))
                + ")"
        );
        
        readMoney.setText("(" + convertMoneyToVietnameseText.convertNumberToVietnameseText(String.valueOf((int) (sum * (1 - decreaseSale / 100.0)))) + ")");
        readMoney.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.yellow));
    }

    public int getValueFormRightString(String s) {
        int i = s.length() - 1;
        while (i >= 0 && s.charAt(i) != ':') {
            i--;
        }
        try {
            if (i >= 0) {
                return Integer.valueOf(s.substring(i + 1));
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        return 0;
    }

    public int getSum() {
        return sum;
    }

    public void setSum(int sum) {
        this.sum = sum;
    }

    public int getNum() {
        return num;
    }

    public void setNum(int num) {
        this.num = num;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    private void performEvent() {
        submitBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (dataCart.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Bạn chưa có sản phẩm nào trong giỏ hàng");
                    return;
                }
                if (kh == null) {
                    JOptionPane.showMessageDialog(null, "Bạn chưa đăng nhập.Vui lòng đăng nhập để xác nhận đơn hàng" + kh);
                    return;
                }
                LocalDate date = LocalDate.now();
                LocalTime time = LocalTime.now();
                int idBill = hdbus.createIdAuto();
                int idCus = kh.getMaKhachHang();
                int idSale = kmbus.getIdInNow();
                //Tao hoa don
                HoaDon hd = new HoaDon(idBill, 0, idCus, idSale, date, time, 0);
                if (hdbus.insertCusBill(hd) == false) {
                    JOptionPane.showMessageDialog(null, "Không thể thêm  hóa đơn");
                }
                //Tao Chi tiet hoa don
                for(ChiTietHoaDon ct : dataCart){
                    ct.setMaHoaDon(idBill);
                }
                if (cthdbus.insertArrayToDB(dataCart) == false) {
                    JOptionPane.showMessageDialog(null, "Không thể thêm chi tiết cho hóa đơn");
                    return;
                }

                String html = "<div style=\"width: 80%;margin-left: 10%;background-color: rgb(226, 224, 224);border-radius: 2rem;height: 20rem;\">\n"
                        + "<div style=\"background-color: cadetblue;height: 4rem;border-top-left-radius: 2rem;border-top-right-radius: 2rem;\">\n"
                        + "<h1 style=\"width: 100%;text-align: center;color: rgb(255, 255, 255);padding-top: 1rem;\">THONG BAO DAT HANG</h1>\n"
                        + "</div>\n"
                        + "<h1 style=\"width: 100%;text-align: center;color:blue;\">Cam on quy khach da mua sach tai cua hang.Cua hang se xac nhan hoa don trong thoi gian som nhat </h1>\n"
                        + "</div>";
                TaiKhoan tk = tkbus.getTKById(kh.getMaKhachHang());
                try {
                    SendEmail send = new SendEmail(tk.getTenDangNhap(), "Dat hang thanh cong", html);
                    send.run();
                    dataCart = new ArrayList<>();
                    loadData();
                    countPrice();
                } catch (Exception ex) {
                }
            }
        });

        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa sản phảm này ?", "Xác nhận", 0) != 0) {
                    return;
                }
                int id = 0;
                try {
                    id = Integer.valueOf(e.getActionCommand());
                } catch (Exception ex) {
                    ex.getMessage();
                }
                for (ChiTietHoaDon ct : dataCart) {
                    if (ct.getMaSach() == id) {
                        sachbus.addNumberBook(ct.getMaSach(), ct.getMaPhieuNhap(), ct.getSoLuong());
                        dataCart.remove(ct);
                        JOptionPane.showMessageDialog(null, "Xóa thành công");
                        loadData();
                        performEvent();
                        countPrice();
                        return;
                    }
                }
            }
        };

        ChangeListener changels = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner sp = (JSpinner) e.getSource();
                JPanel p = (JPanel) ((JSpinner) e.getSource()).getParent();
                //Lay Ma Sach
                int id = 0;
                for (Component c : p.getComponents()) {
                    if (c instanceof JLabel && Other.convertTextToEnglish(((JLabel) c).getText()).contains("masach")) {
                        id = getValueFormRightString(Other.convertTextToEnglish(((JLabel) c).getText()));
                    }
                }
                //Kiem tra hop le
                try {
                    if (id == 0) {
                        throw new Exception();
                    }
                    int value = Integer.valueOf(String.valueOf(sp.getValue()));
                    if (value <= 0 || value > sachbus.getNumberBookById(id)) {
                        for (ChiTietHoaDon ct : dataCart) {
                            if (ct.getMaSach() == id) {
                                sp.setValue(ct.getSoLuong());
                                throw new Exception();
                            }
                        }
                    }
                    for (ChiTietHoaDon ct : dataCart) {
                        if (ct.getMaSach() == id) {

                            sachbus.addNumberBook(id, ct.getMaPhieuNhap(), ct.getSoLuong() - value);
                            ct.setSoLuong(value);
                            countPrice();
                        }
                    }
                    loadData();
                    performEvent();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ hoặc không đủ số lượng");
                    return;
                }
            }
        };
        for (Component c : contentJScroll.getComponents()) {
            if (c instanceof JViewport) {
                for (Component c1 : ((JViewport) c).getComponents()) {
                    if (c1 instanceof Container) {
                        for (Component c2 : ((Container) c1).getComponents()) {
                            if (c2 instanceof JPanel) {
                                for (Component c3 : ((JPanel) c2).getComponents()) {
                                    if (c3 instanceof JSpinner) {
                                        ((JSpinner) c3).addChangeListener(changels);
                                    }
                                    if (c3 instanceof JButton) {
                                        ((JButton) c3).addActionListener(ac);
                                        //Tìm Mã Sách
                                        for (Component c4 : ((JPanel) c2).getComponents()) {
                                            if (c4 instanceof JLabel && Other.convertTextToEnglish(((JLabel) c4).getText()).contains("masach")) {
                                                int id = getValueFormRightString(Other.convertTextToEnglish(((JLabel) c4).getText()));
                                                ((JButton) c3).setActionCommand(String.valueOf(id));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void recoveryNumberBook() {
        for (ChiTietHoaDon ct : dataCart) {
            sachbus.addNumberBook(ct.getMaSach(), ct.getMaPhieuNhap(), ct.getSoLuong());
        }
    }
}
