/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.QLSach;

import BUS.SachBus;
import BUS.TheLoaiBus;
import DTO.Sach;
import DTO.TheLoai;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author MINHTHUAN
 */
public class SuaSach extends javax.swing.JFrame {

    TheLoaiBus theloaibus = new TheLoaiBus();
    SachBus sachBus = new SachBus();

    /**
     * Creates new form ThemSach
     */
    public SuaSach() {
        initComponents();
        initialization();
        performEvent();
        /*
        String url = ".\\src\\ICON\\empty.png";
        image.setIcon(new ImageIcon(otherFunction.resizeImage(url, image)));
        nameImage.setText(otherFunction.getNameImage(url));        
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        bookName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        bookPrice = new javax.swing.JTextField();
        bookNXB = new javax.swing.JTextField();
        bookSale = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        bookType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        updateImage = new javax.swing.JButton();
        addImage = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        nameImage = new javax.swing.JTextField();
        bookId = new javax.swing.JComboBox<>();
        bookStatus = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        bookAuthor = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Background.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("Mã Sách");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("Tên Sách");

        bookName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel11.setText("Giá");

        bookPrice.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        bookNXB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        bookSale.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel14.setText("% Giảm");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Mã Thể Loại");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel16.setText("NXB");

        bookType.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sửa Sách");

        updateImage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        updateImage.setText("Cập nhật hình ảnh");

        addImage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        addImage.setText("Cập Nhật");

        refreshBtn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        refreshBtn.setText("Làm lại");

        nameImage.setText("Name image");
        nameImage.setEnabled(false);

        bookId.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        bookStatus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel17.setText("Trạng thái");

        bookAuthor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel18.setText("Tác Giả");

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BackgroundLayout.createSequentialGroup()
                            .addComponent(updateImage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameImage, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BackgroundLayout.createSequentialGroup()
                            .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel15)
                                .addComponent(jLabel14)
                                .addComponent(jLabel17))
                            .addGap(33, 33, 33)
                            .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bookType, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bookSale, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bookStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(BackgroundLayout.createSequentialGroup()
                            .addComponent(refreshBtn)
                            .addGap(35, 35, 35)
                            .addComponent(addImage)))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel16)
                            .addComponent(jLabel9)
                            .addComponent(jLabel18))
                        .addGap(66, 66, 66)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookNXB, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(bookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(bookNXB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(bookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(bookType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(bookSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(updateImage)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addImage)
                    .addComponent(refreshBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SuaSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SuaSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SuaSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuaSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SuaSach().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton addImage;
    private javax.swing.JTextField bookAuthor;
    private javax.swing.JComboBox<String> bookId;
    private javax.swing.JTextField bookNXB;
    private javax.swing.JTextField bookName;
    private javax.swing.JTextField bookPrice;
    private javax.swing.JTextField bookSale;
    private javax.swing.JTextField bookStatus;
    private javax.swing.JComboBox<String> bookType;
    private javax.swing.JLabel image;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nameImage;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton updateImage;
    // End of variables declaration//GEN-END:variables

    private void initialization() {
        this.setLocationRelativeTo(null);
        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
        nameImage.setText("empty.png");
        loadType();
        loadBook();
        setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    private void loadType() {
        ArrayList<TheLoai> data = theloaibus.getAllType();
        for (TheLoai tl : data) {
            bookType.addItem(String.valueOf(tl.getMaTheLoai()) + "-" + tl.getTenTheLoai());
        }
    }

    private boolean checkInput() {

        if (bookName.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập tên Sách");
            return false;
        }
        if (bookPrice.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập giá Sách");
            return false;
        }
        try {
            if (Integer.valueOf(bookPrice.getText()) < 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Giá sách phải là số nguyên > 0");
            return false;
        }
        if (bookNXB.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng NXB Sách");
            return false;
        }
        if (bookSale.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng Phần trăm giảm giá");
            return false;
        }
        try {
            if (Integer.valueOf(bookSale.getText()) < 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Phần trăm giảm giá phải là số nguyên > 0");
            return false;
        }
        if(bookStatus.getText().compareTo("true") != 0 && bookStatus.getText().compareTo("false") != 0){
            JOptionPane.showMessageDialog(null, "trạng thái phải là true/false");
            return false;
        }
        return true;
    }

    private void performEvent() {
        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (e.getActionCommand()) {
                    case "Cập nhật hình ảnh": {
                        selectFile();
                        break;
                    }
                    case "Làm lại": {

                        bookName.setText("");
                        bookPrice.setText("");
                        bookNXB.setText("");
                        bookType.setSelectedIndex(0);
                        bookSale.setText("");
                        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                        nameImage.setText("empty.png");
                        break;
                    }
                    case "Cập Nhật": {
                        if (checkInput() == false) {
                            return;
                        }
                        
                        Sach sach = new Sach(
                                getIdFromType(String.valueOf(bookId.getSelectedItem())),
                                bookName.getText(),
                                Integer.valueOf(bookPrice.getText()),
                                0,
                                bookNXB.getText(),
                                getIdFromType(String.valueOf(bookType.getSelectedItem())),
                                Boolean.valueOf(bookStatus.getText()),
                                nameImage.getText(),
                                Integer.valueOf(bookSale.getText()),
                                bookAuthor.getText()
                        );

                        String result = sachBus.updateBook(sach);
                        if (result.compareTo("") == 0) {
                            JOptionPane.showMessageDialog(null, "Không thể Cập nhật");
                            return;
                        }
                        JOptionPane.showMessageDialog(null, result);
                        bookId.setSelectedIndex(0);
                        bookName.setText("");
                        bookPrice.setText("");
                        bookNXB.setText("");
                        bookType.setSelectedIndex(0);
                        bookSale.setText("");
                        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                        nameImage.setText("empty.png");
                        return;
                    }
                }
            }
        };
        updateImage.addActionListener(ac);
        updateImage.setActionCommand(updateImage.getActionCommand());
        refreshBtn.addActionListener(ac);
        refreshBtn.setActionCommand(refreshBtn.getActionCommand());
        addImage.addActionListener(ac);
        addImage.setActionCommand(addImage.getActionCommand());
        
        //Bat onchange combobox
        bookId.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int select = bookId.getSelectedIndex();
                if (select == 0) {
                    bookName.setText("");
                    bookPrice.setText("");
                    bookNXB.setText("");
                    bookType.setSelectedIndex(0);
                    bookSale.setText("");
                    bookStatus.setText("");
                    image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                    nameImage.setText("empty.png");
                    return;
                }
                Sach s = sachBus.getBookById(getIdFromType(String.valueOf(bookId.getSelectedItem())));
                if (s == null) {
                    JOptionPane.showMessageDialog(null, "Lỗi khi load dữ liệu");
                    return;
                }

                bookName.setText(s.getTenSach());
                bookPrice.setText(String.valueOf(s.getGia()));
                bookNXB.setText(s.getNhaXuatBan());
                bookType.setSelectedItem(String.valueOf(s.getMaTheLoai()) + "-" + sachBus.getNameTypeById(s.getMaTheLoai()));
                bookSale.setText(String.valueOf(s.getPhanTramGiamGia()));
                image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\" + s.getHinhAnh(), image)));
                nameImage.setText(s.getHinhAnh());
                bookStatus.setText(String.valueOf(s.isTrangThai()));
                bookAuthor.setText(s.getTacGia());
            }
        });
    }

    public void selectFile() {
        //JFileChooser chooser = new JFileChooser();
        FileDialog chooser = new FileDialog(new Frame(), "Chọn hình ảnh", FileDialog.LOAD);
        chooser.setVisible(true);
        if(chooser.getFile()!= null && chooser.getFile().contains(".png") == false && chooser.getFile().contains(".jpg") == false && chooser.getFile().contains(".jpeg") == false){
            JOptionPane.showMessageDialog(null, "Định dạng không hợp lệ");
            return;
        }
        String url = chooser.getDirectory() + chooser.getFile();
        if(url.equals("nullnull")){
            return;
        }
        Image img = ProcessingFunction.CopyImage.resizeImage(url, image);
        ImageIcon imgIcon = new ImageIcon(img);
        image.setIcon(imgIcon);
        nameImage.setText(ProcessingFunction.CopyImage.getNameImage(url));
        ProcessingFunction.CopyImage.copyImage(url);
    }

    public int getIdFromType(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i) != '-') {
            i++;
        }
        return Integer.valueOf(s.substring(0, i));
    }

    private void loadBook() {
        ArrayList<Sach> data = sachBus.getAllData();
        ArrayList<Integer> isRead = new ArrayList<>();
        bookId.addItem("[Lựa chọn]");
        for (Sach s : data) {
            boolean OK = true;
            for(Integer num : isRead){
                if(num == s.getMaSach()){
                    OK = false;
                    break;
                }
            }
            if(OK == false) continue;
            isRead.add(s.getMaSach());
            bookId.addItem(String.valueOf(s.getMaSach()) + "-" + s.getTenSach());
        }
    }
}
