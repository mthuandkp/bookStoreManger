/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.QLPhieuNhap;

import BUS.NhaCungCapBus;
import BUS.NhanVienBus;
import BUS.PhieuNhapBus;
import DTO.NhaCungCap;
import DTO.NhanVien;
import DTO.PhieuNhap;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHTHUAN
 */
public class TimKiem extends javax.swing.JFrame {
    PhieuNhapBus pnbus = new PhieuNhapBus();
    NhaCungCapBus nccbus = new NhaCungCapBus();
    NhanVienBus nvbus = new NhanVienBus();
    /**
     * Creates new form TimKiem
     */
    public TimKiem() {
        initComponents();
        initialization();
        performEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idStaffSelect = new javax.swing.JComboBox<>();
        dateValue = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        receiptCheck = new javax.swing.JCheckBox();
        suplierCheck = new javax.swing.JCheckBox();
        dateCheck = new javax.swing.JCheckBox();
        idReceiptSelect = new javax.swing.JComboBox<>();
        idSuplierSelect = new javax.swing.JComboBox<>();
        timeValue = new javax.swing.JTextField();
        staffCheck = new javax.swing.JCheckBox();
        timeCheck = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("Tìm kiếm phiếu nhập");

        idStaffSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        dateValue.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        find.setBackground(new java.awt.Color(255, 255, 255));
        find.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/search_50px.png"))); // NOI18N
        find.setText("Tìm kiếm");

        receiptCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        receiptCheck.setText("Mã phiếu nhập");

        suplierCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        suplierCheck.setText("Mã nhà cung cấp");

        dateCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        dateCheck.setText("Ngày nhập(yyyy/mm/dd)");

        idReceiptSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        idSuplierSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        timeValue.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        staffCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        staffCheck.setText("Mã nhân viên");

        timeCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        timeCheck.setText("Giờ nhập(h:m:s)");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(find)
                        .addGap(77, 77, 77))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(suplierCheck)
                            .addComponent(staffCheck)
                            .addComponent(receiptCheck))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idSuplierSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idStaffSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idReceiptSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateCheck)
                            .addComponent(timeCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateCheck)
                            .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receiptCheck))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeCheck)
                            .addComponent(staffCheck))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(suplierCheck)
                            .addComponent(idSuplierSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(find)
                        .addGap(28, 28, 28))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(idReceiptSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(idStaffSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimKiem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JCheckBox dateCheck;
    private javax.swing.JTextField dateValue;
    private javax.swing.JButton find;
    private javax.swing.JComboBox<String> idReceiptSelect;
    private javax.swing.JComboBox<String> idStaffSelect;
    private javax.swing.JComboBox<String> idSuplierSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox receiptCheck;
    private javax.swing.JCheckBox staffCheck;
    private javax.swing.JCheckBox suplierCheck;
    private javax.swing.JTable table;
    private javax.swing.JCheckBox timeCheck;
    private javax.swing.JTextField timeValue;
    // End of variables declaration//GEN-END:variables

    private void initialization() {
        this.setLocationRelativeTo(null);
        initTable();
        loadId();
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    private void performEvent() {
        find.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int idReceipt = 0;
                int idStaff = 0;
                int idSuplier = 0;
                String date = "";
                String time = "";
                
                if(receiptCheck.isSelected()){
                    idReceipt = Integer.valueOf(String.valueOf(idReceiptSelect.getSelectedItem()));
                }
                if(staffCheck.isSelected()){
                    idStaff = Integer.valueOf(String.valueOf(idStaffSelect.getSelectedItem()));
                }
                if(suplierCheck.isSelected()){
                    idSuplier = Integer.valueOf(String.valueOf(idSuplierSelect.getSelectedItem()));
                }
                if(dateCheck.isSelected()){
                    if(dateValue.getText().compareTo("") == 0){
                        JOptionPane.showMessageDialog(null,"Vui lòng nhập vào ngày cần tìm");
                        return;
                    }
                    if(ProcessingFunction.check.checkValidDate(dateValue.getText()) == false){
                        JOptionPane.showMessageDialog(null,"Ngày không hợp lệ hoặc không đúng định dạng");
                        return;
                    }
                    date = dateValue.getText();
                }
                if(timeCheck.isSelected()){
                    if(ProcessingFunction.check.checkValidTime(timeValue.getText()) == false){
                        JOptionPane.showMessageDialog(null, "Thời gian không hợp lệ");
                        return;
                    }
                    time = timeValue.getText();
                }
                
                ArrayList<PhieuNhap> data = pnbus.getDataByKey(idReceipt, idStaff, idSuplier, date, time);
                DefaultTableModel defaults = (DefaultTableModel)table.getModel();
                removeAllTable();
                for(PhieuNhap pn : data){
                    Object []obj = new Object[5];
                    obj[0] = pn.getMaPhieuNhap();
                    obj[1] = pn.getMaNhanVien();
                    obj[2] = pn.getMaNhaCungCap();
                    obj[3] = pn.getNgayNhap();
                    obj[4] = pn.getGioNhap();
                    defaults.addRow(obj);
                }
            }
        });
    }
    
    private void initTable() {
        String []header = {"Mã phiếu nhập","Mã nhân viên","Mã nhà cung cấp","Ngày nhập","Giờ nhập"};
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();

        Arrays.stream(header).forEach(s -> {
            defaults.addColumn(s);
        });

        table.setRowHeight(25);
    }
    
    public void removeAllTable() {
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (int i = defaults.getRowCount() - 1; i >= 0; i--) {
            defaults.removeRow(i);
        }
    }
    
    public void loadId(){
        ArrayList<PhieuNhap> dataPn = pnbus.getAllData();
        ArrayList<NhanVien> dataNv = nvbus.getAllData();
        ArrayList<NhaCungCap> dataNcc = nccbus.getAllData();
        
        for(PhieuNhap pn : dataPn){
            idReceiptSelect.addItem(String.valueOf(pn.getMaPhieuNhap()));
        }
        for(NhanVien nv : dataNv){
            idStaffSelect.addItem(String.valueOf(nv.getMaNhanVien()));
        }
        for(NhaCungCap ncc : dataNcc){
            idSuplierSelect.addItem(String.valueOf(ncc.getMaNhaCungCap()));
        }
    }
}
