/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.QLPhieuNhap;

import BUS.ChiTietPhieuNhapBus;
import BUS.NhaCungCapBus;
import BUS.PhieuNhapBus;
import BUS.SachBus;
import BUS.TheLoaiBus;
import DAO.ChiTietPhieuNhapDao;
import DTO.NhaCungCap;
import DTO.NhanVien;
import DTO.Sach;
import DTO.TheLoai;
import ProcessingFunction.CopyImage;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHTHUAN
 */
public class ThemPhieuNhap extends javax.swing.JFrame {

    NhaCungCapBus nhacungcapbus = new NhaCungCapBus();
    PhieuNhapBus phieunhapbus = new PhieuNhapBus();
    ArrayList<Sach> data = new ArrayList<>();
    TheLoaiBus theloaibus = new TheLoaiBus();
    SachBus sachBus = new SachBus();
    NhanVien nv = null;
    ChiTietPhieuNhapBus ctpnbus = new ChiTietPhieuNhapBus();

    /**
     * Creates new form ThemPhieuNhap
     */
    public ThemPhieuNhap() {
        initComponents();
        initialization();
        performEvent();
    }

    public ThemPhieuNhap(NhanVien nv) {
        initComponents();
        initialization();
        performEvent();
        this.nv = nv;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idReceipt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        idSupplier = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        Background = new javax.swing.JPanel();
        bookIdJCombo = new javax.swing.JComboBox<>();
        bookId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        bookName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        bookPrice = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        bookNumber = new javax.swing.JTextField();
        bookNXB = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        bookType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        updateImage = new javax.swing.JButton();
        nameImage = new javax.swing.JTextField();
        isExist = new javax.swing.JCheckBox();
        isEdit = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        bookAuthor = new javax.swing.JTextField();
        refreshBtn = new javax.swing.JButton();
        addReceipt = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        addDetail = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel1.setText("Mã phiếu nhập");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 16, -1, -1));

        idReceipt.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        idReceipt.setEnabled(false);
        background.add(idReceipt, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 13, 414, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel2.setText("Nhà cung cấp");
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 111, -1, -1));

        idSupplier.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        background.add(idSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 108, 414, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Chi tiết Phiếu nhập");
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 176, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 231, 920, 364));

        Background.setBackground(new java.awt.Color(255, 255, 255));
        Background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookIdJCombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookIdJCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 250, -1));

        bookId.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookId, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 84, 249, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("Mã Sách");
        Background.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 87, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("Tên Sách");
        Background.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 143, -1, -1));

        bookName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookName, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 140, 400, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel11.setText("Giá");
        Background.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 196, -1, -1));

        bookPrice.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 193, 400, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel12.setText("Số Lượng");
        Background.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 249, -1, -1));

        bookNumber.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 246, 400, -1));

        bookNXB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookNXB, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 294, 400, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Mã Thể Loại");
        Background.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 398, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel16.setText("NXB");
        Background.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 297, -1, -1));

        bookType.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookType, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 395, 400, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Thêm Sách");
        Background.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 0, 564, 77));
        Background.add(image, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 448, 93, 134));

        updateImage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        updateImage.setText("Cập nhật hình ảnh");
        Background.add(updateImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 502, -1, -1));

        nameImage.setText("Name image");
        nameImage.setEnabled(false);
        Background.add(nameImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 589, 176, -1));

        isExist.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        isExist.setText("Đã tồn tại");
        Background.add(isExist, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 85, -1, -1));

        isEdit.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        isEdit.setText("Sửa ?");
        isEdit.setEnabled(false);
        Background.add(isEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 448, -1, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel17.setText("Tác Giả");
        Background.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 345, -1, -1));

        bookAuthor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Background.add(bookAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 342, 400, -1));

        background.add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(965, 0, -1, 630));

        refreshBtn.setBackground(new java.awt.Color(255, 255, 255));
        refreshBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(153, 51, 255));
        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/refresh_64px.png"))); // NOI18N
        refreshBtn.setText("Làm Lại");
        background.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 670, 220, -1));

        addReceipt.setBackground(new java.awt.Color(255, 255, 255));
        addReceipt.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        addReceipt.setForeground(new java.awt.Color(0, 204, 0));
        addReceipt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/tick_box_48px.png"))); // NOI18N
        addReceipt.setText("Thêm Phiếu Nhập");
        background.add(addReceipt, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 670, -1, -1));

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        editBtn.setForeground(new java.awt.Color(153, 51, 255));
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/edit_48px_Orange.png"))); // NOI18N
        editBtn.setText("Sửa Chi Tiết");
        background.add(editBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 610, -1, -1));

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(153, 51, 255));
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/delete_48px.png"))); // NOI18N
        deleteBtn.setText("Xóa Chi Tiết");
        background.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 610, -1, -1));

        addDetail.setBackground(new java.awt.Color(255, 255, 255));
        addDetail.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        addDetail.setForeground(new java.awt.Color(153, 51, 255));
        addDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/add_50px.png"))); // NOI18N
        addDetail.setText("Cập Nhật");
        background.add(addDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 670, 220, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemPhieuNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemPhieuNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemPhieuNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemPhieuNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThemPhieuNhap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton addDetail;
    private javax.swing.JButton addReceipt;
    private javax.swing.JPanel background;
    private javax.swing.JTextField bookAuthor;
    private javax.swing.JTextField bookId;
    private javax.swing.JComboBox<String> bookIdJCombo;
    private javax.swing.JTextField bookNXB;
    private javax.swing.JTextField bookName;
    private javax.swing.JTextField bookNumber;
    private javax.swing.JTextField bookPrice;
    private javax.swing.JComboBox<String> bookType;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField idReceipt;
    private javax.swing.JComboBox<String> idSupplier;
    private javax.swing.JLabel image;
    private javax.swing.JCheckBox isEdit;
    private javax.swing.JCheckBox isExist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameImage;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTable table;
    private javax.swing.JButton updateImage;
    // End of variables declaration//GEN-END:variables

    private void initialization() {
        this.setLocationRelativeTo(null);
        loadSupplier();
        idReceipt.setText(String.valueOf(phieunhapbus.createAutoId()));

        this.setLocationRelativeTo(null);
        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
        nameImage.setText("empty.png");
        loadType();
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        initTable();
        loadTableData();
        loadIdBook();
        //ẩn jcombobox mã sách
        bookIdJCombo.setVisible(false);
        //Ẩn mã sách và tạo mã tự động
        bookId.setEnabled(false);
        bookId.setText(String.valueOf(sachBus.createAutoId()));
    }

    public int getIdFromType(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i) != '-') {
            i++;
        }
        return Integer.valueOf(s.substring(0, i));
    }

    private void loadSupplier() {
        ArrayList<NhaCungCap> data = nhacungcapbus.getAllData();
        for (NhaCungCap ncc : data) {
            idSupplier.addItem(String.valueOf(ncc.getMaNhaCungCap()) + "-" + ncc.getTenNhaCungCap());
        }
    }

    private void loadType() {
        ArrayList<TheLoai> data = theloaibus.getAllType();
        for (TheLoai tl : data) {
            bookType.addItem(String.valueOf(tl.getMaTheLoai()) + "-" + tl.getTenTheLoai());
        }
    }

    private boolean checkInput() {
        if (isExist.isSelected() && bookIdJCombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách cần thêm");
            return false;
        }
        if (isExist.isSelected() == false) {
            if (bookName.getText().compareTo("") == 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên Sách");
                return false;
            }
            if (bookPrice.getText().compareTo("") == 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập giá Sách");
                return false;
            }
            try {
                if (Integer.valueOf(bookPrice.getText()) < 0) {
                    throw new Exception();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Giá sách phải là số nguyên > 0");
                return false;
            }
        }

        if (bookNumber.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng số lượng Sách");
            return false;
        }
        try {
            if (Integer.valueOf(bookNumber.getText()) < 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Số lượng sách phải là số nguyên > 0");
            return false;
        }
        if (isExist.isSelected() == false) {
            if (bookNXB.getText().compareTo("") == 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập NXB Sách");
                return false;
            }
        }
        if (bookAuthor.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập tác giả Sách");
            return false;
        }
        return true;
    }

    private void performEvent() {
        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (e.getActionCommand()) {
                    case "Cập nhật hình ảnh": {
                        selectFile();
                        break;
                    }

                    case "Làm Lại": {
                        
                        bookName.setText("");
                        bookPrice.setText("");
                        bookNumber.setText("");
                        bookNXB.setText("");
                        bookType.setSelectedIndex(0);
                        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                        nameImage.setText("empty.png");
                        isEdit.setSelected(false);
                        bookId.setEnabled(true);
                        isExist.setSelected(false);
                        isExist.setEnabled(true);
                        enableInput();
                        bookId.setText(String.valueOf(sachBus.createAutoId()));
                        bookId.setEnabled(false);
                        break;
                    }
                    case "Cập Nhật": {
                        //============================== SỬA TRONG CHI TIẾT PHIẾU NHẬP ===================================
                        if (checkInput() == false) {
                            return;
                        }
                        int id = (isExist.isSelected()) ? getValueLeft(String.valueOf(bookIdJCombo.getSelectedItem())) : Integer.valueOf(bookId.getText());
                        Sach sach = new Sach(
                                id,
                                bookName.getText(),
                                Integer.valueOf(bookPrice.getText()),
                                Integer.valueOf(bookNumber.getText()),
                                bookNXB.getText(),
                                getIdFromType(String.valueOf(bookType.getSelectedItem())),
                                true,
                                nameImage.getText(),
                                bookAuthor.getText()
                        );

                        if (isEdit.isSelected()) {
                            if (sachBus.updateBookIntoArrayList(data, sach)) {
                                JOptionPane.showMessageDialog(null, "Sửa thành công");
                                enableInput();
                                isEdit.setSelected(false);
                                loadTableData();
                                bookName.setText("");
                                bookPrice.setText("");
                                bookNumber.setText("");
                                bookNXB.setText("");
                                bookAuthor.setText("");
                                bookType.setSelectedIndex(0);
                                image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                                nameImage.setText("empty.png");
                                isEdit.setSelected(false);
                                isExist.setSelected(false);
                                isExist.setEnabled(true);
                                enableInput();
                                int nextId = sachBus.createAutoId();
                                if (data == null || data.isEmpty()) {
                                    bookId.setText(String.valueOf(nextId));
                                    return;
                                }
                                while (sachBus.isExistId(data, nextId)) {
                                    nextId++;
                                }
                                bookId.setText(String.valueOf(nextId));
                            }
                            return;
                        }
                        /*============================= THÊM CHI TIẾT =============================*/
                        //Kiểm tra trùng mã
                        if (data.isEmpty() == false && isExist.isSelected()) {
                            for (Sach s : data) {
                                if (s.getMaSach() == getValueLeft(String.valueOf(bookIdJCombo.getSelectedItem()))) {
                                    JOptionPane.showMessageDialog(null, "Mã sách này đã tồn tại trong chi tiết vui lòng sử dụng chức năng chỉnh sửa");
                                    return;
                                }
                            }
                        }
                        
                        //Kiem tra ma sach da ton tai  trong DB
                        if (isExist.isSelected() == false) {
                            System.out.println("Chạy toi day ne");
                            int idDB = sachBus.getIdBookContains(bookName.getText());
                            if (id != 0 && sachBus.getNameById(idDB).compareTo("")!=0) {
                                int select = JOptionPane.showConfirmDialog(null, "Tên sách [" + bookName.getText() + "] gần giống với [" + sachBus.getNameById(idDB) + "] trong Database bạn có muốn thêm mới hay không ?");
                                if (select != 0) {
                                    return;
                                }
                            }
                        }

                        //Lay %giamgia va trang thai neu sach da ton tai
                        if (sachBus.isExistBook(Integer.valueOf(bookId.getText()))) {
                            Sach tmp = sachBus.getBookById(Integer.valueOf(bookId.getText()));
                            sach.setTrangThai(tmp.isTrangThai());
                            sach.setPhanTramGiamGia(tmp.getPhanTramGiamGia());
                        } else {
                            sach.setTrangThai(true);
                            sach.setPhanTramGiamGia(0);
                        }

                        data.add(sach);
                        loadTableData();
                        bookId.setText("");
                        bookName.setText("");
                        bookPrice.setText("");
                        bookNumber.setText("");
                        bookNXB.setText("");
                        bookAuthor.setText("");
                        bookType.setSelectedIndex(0);
                        image.setIcon(new ImageIcon(ProcessingFunction.CopyImage.resizeImage(".\\src\\Book_Image\\empty.png", image)));
                        nameImage.setText("empty.png");
                        JOptionPane.showMessageDialog(null, "Thêm thành công");
                        enableInput();
                        isExist.setSelected(false);
                        int nextId = sachBus.createAutoId();
                        if (data == null || data.isEmpty()) {
                            bookId.setText(String.valueOf(nextId));
                            return;
                        }
                        while (sachBus.isExistId(data, nextId)) {
                            nextId++;
                        }
                        bookId.setText(String.valueOf(nextId));
                        loadTableData();
                        break;
                    }
                    case "Sửa Chi Tiết": {
                        if (table.getSelectedRow() < 0) {
                            JOptionPane.showMessageDialog(null, "Vui lòng chọn 1 dòng để sửa");
                            return;
                        }
                        enableInput();
                        int idSelect = Integer.valueOf(String.valueOf(table.getValueAt(table.getSelectedRow(), 0)));
                        Sach s = sachBus.getBookById(data, idSelect);
                        bookId.setText(String.valueOf(s.getMaSach()));
                        bookId.setEnabled(false);
                        bookName.setText(s.getTenSach());
                        bookNumber.setText(String.valueOf(s.getSoLuong()));
                        bookPrice.setText(String.valueOf(s.getGia()));
                        bookNXB.setText(s.getNhaXuatBan());
                        bookType.setSelectedItem(String.valueOf(s.getMaTheLoai()) + "-"
                                + theloaibus.getNameTypeById(Integer.valueOf(s.getMaTheLoai())));
                        bookAuthor.setText(s.getTacGia());
                        isEdit.setSelected(true);
                        isExist.setEnabled(false);
                        isExist.setSelected(false);
                        if (sachBus.isExistBook(idSelect)) {
                            disableInput();
                        }
                        //Gán hình ảnh
                        String url = ".\\src\\Book_Image\\" + String.valueOf(table.getValueAt(table.getSelectedRow(), 6));
                        image.setIcon(new ImageIcon(CopyImage.resizeImage(url, image)));
                        nameImage.setText(CopyImage.getNameImage(url));
                        break;
                    }

                    case "Xóa Chi Tiết": {
                        int id = table.getSelectedRow();
                        if (id < 0) {
                            JOptionPane.showMessageDialog(null, "Vui lòng chọn 1 dòng để xóa");
                            return;
                        }
                        if (JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa chi tiết này ?", "Xóa chi tiết", 0) != 0) {
                            return;
                        }
                        id = Integer.valueOf(String.valueOf(table.getValueAt(table.getSelectedRow(), 0)));
                        if (sachBus.deleteBookIntoArrayList(data, id)) {
                            JOptionPane.showMessageDialog(null, "Xóa chi tiết thành công");
                            loadTableData();
                        }
                        break;
                    }
                    case "Thêm Phiếu Nhập": {
                        if (data == null || data.size() == 0) {
                            JOptionPane.showMessageDialog(null, "Không thể thiết lập hóa đơn với chi tiết rỗng");
                            return;
                        }

                        LocalDate date = LocalDate.now();
                        LocalTime time = LocalTime.now();
                        //Thêm phiếu nhập
                        if (phieunhapbus.insertPhieuNhap(Integer.valueOf(
                                idReceipt.getText()),
                                nv.getMaNhanVien(),
                                getIdFromType(String.valueOf(idSupplier.getSelectedItem())),
                                date,
                                time) == false) {
                            JOptionPane.showMessageDialog(null, "Không thể lưu Phiếu Nhập");
                            return;
                        }

                        //Cập nhật sách vào DB
                        if (sachBus.addArrayListBookIntoDB(data, Integer.valueOf(idReceipt.getText())) == false) {
                            JOptionPane.showMessageDialog(null, "Không thể cập nhật");
                            return;
                        }

                        //Thêm chi tiết phiếu nhập
                        if (ctpnbus.addReceiptDetail(Integer.valueOf(idReceipt.getText()), data) == false) {
                            JOptionPane.showMessageDialog(null, "Không thể cập nhật");
                            return;
                        }
                        JOptionPane.showMessageDialog(null, "Thêm thành công");
                        idReceipt.setText(String.valueOf(phieunhapbus.createAutoId()));
                        data = new ArrayList<>();
                        loadTableData();
                        loadIdBook();
                        break;
                    }
                }
            }
        };
        updateImage.addActionListener(ac);
        updateImage.setActionCommand(updateImage.getActionCommand());
        refreshBtn.addActionListener(ac);
        refreshBtn.setActionCommand(refreshBtn.getActionCommand());
        addDetail.addActionListener(ac);
        addDetail.setActionCommand(addDetail.getActionCommand());
        editBtn.addActionListener(ac);
        editBtn.setActionCommand(editBtn.getActionCommand());
        deleteBtn.addActionListener(ac);
        deleteBtn.setActionCommand(deleteBtn.getActionCommand());
        addReceipt.addActionListener(ac);
        addReceipt.setActionCommand(addReceipt.getActionCommand());

        isExist.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isExist.isSelected()) {
                    //Hien Jcombobox va an di JTextfield
                    bookIdJCombo.setVisible(true);
                    bookId.setVisible(false);
                    disableInput();
                    return;
                }
                enableInput();
                bookName.setText("");
                bookNXB.setText("");
                bookNumber.setText("");
                bookPrice.setText("");
                bookAuthor.setText("");
                bookType.setSelectedItem(0);

                bookName.setEnabled(true);
                bookPrice.setEnabled(true);
                bookNXB.setEnabled(true);
                bookType.setEnabled(true);

            }

        });

        bookIdJCombo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (bookIdJCombo.getSelectedIndex() == 0) {
                    bookName.setText("");
                    bookNXB.setText("");
                    bookNumber.setText("");
                    bookPrice.setText("");
                    bookType.setSelectedItem(0);
                    bookAuthor.setText("");
                    return;
                }
                int id = getValueLeft(String.valueOf(bookIdJCombo.getSelectedItem()));
                //Tim sach co id
                Sach s = sachBus.getBookById(id);
                bookAuthor.setText(s.getTacGia());
                bookName.setText(s.getTenSach());
                bookNXB.setText(s.getNhaXuatBan());
                bookType.setSelectedItem(String.valueOf(s.getMaTheLoai()) + "-" + theloaibus.getNameTypeById(s.getMaTheLoai()));
                bookPrice.setText(String.valueOf(s.getGia()));
                 //Gán hình ảnh
                 String url = ".\\src\\Book_Image\\" + s.getHinhAnh();
                 image.setIcon(new ImageIcon(CopyImage.resizeImage(url, image)));
                 nameImage.setText(CopyImage.getNameImage(url));
            }
        });
    }

    public void selectFile() {
        //JFileChooser chooser = new JFileChooser();
        FileDialog chooser = new FileDialog(new Frame(), "Chọn hình ảnh", FileDialog.LOAD);
        chooser.setVisible(true);
        if (chooser.getFile() != null && chooser.getFile().contains(".png") == false && chooser.getFile().contains(".jpg") == false && chooser.getFile().contains(".jpeg") == false) {
            JOptionPane.showMessageDialog(null, "Định dạng không hợp lệ");
            return;
        }
        String url = chooser.getDirectory() + chooser.getFile();
        if (url.equals("nullnull")) {
            return;
        }
        Image img = ProcessingFunction.CopyImage.resizeImage(url, image);
        ImageIcon imgIcon = new ImageIcon(img);
        image.setIcon(imgIcon);
        nameImage.setText(ProcessingFunction.CopyImage.getNameImage(url));
        ProcessingFunction.CopyImage.copyImage(url);
    }

    public void loadTableData() {
        removeAllTable();
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (Sach s : data) {
            Object[] obj = new Object[8];
            obj[0] = s.getMaSach();
            obj[1] = s.getTenSach();
            obj[2] = s.getGia();
            obj[3] = s.getSoLuong();
            obj[4] = s.getNhaXuatBan();
            obj[5] = s.getMaTheLoai();
            obj[6] = s.getHinhAnh();
            obj[7] = s.getTacGia();
            defaults.addRow(obj);
        }
    }

    private void initTable() {
        String[] header = {"Id", "Tên Sách", "Giá", "Số Lượng", "NXB", "Loại", "Hình Ảnh", "Tác Giả"};
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();

        Arrays.stream(header).forEach(s -> {
            defaults.addColumn(s);
        });

        table.setRowHeight(25);
        //https://www.tutorialspoint.com/how-to-change-each-column-width-of-a-jtable-in-java#:~:text=By%20default%20the%20width%20of,()%20method%20of%20JTable%20class.

        table.getColumnModel().getColumn(0).setPreferredWidth(15);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(5).setPreferredWidth(15);
    }

    public void removeAllTable() {
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (int i = defaults.getRowCount() - 1; i >= 0; i--) {
            defaults.removeRow(i);
        }
    }

    public void enableInput() {
        bookId.setVisible(true);
        bookName.setEnabled(true);
        bookNXB.setEnabled(true);
        bookType.setEnabled(true);
        bookPrice.setEnabled(true);
        bookIdJCombo.setVisible(false);
        bookAuthor.setEnabled(true);
    }

    public void disableInput() {
        bookId.setVisible(false);
        bookName.setEnabled(false);
        bookNXB.setEnabled(false);
        bookType.setEnabled(false);
        bookAuthor.setEnabled(false);
        bookPrice.setEnabled(false);
        bookIdJCombo.setVisible(true);
    }

    private void loadIdBook() {
        bookIdJCombo.removeAllItems();
        ArrayList<Sach> data = sachBus.getAllSachNotDuplicate();
        bookIdJCombo.addItem("[Lựa chọn sách]");
        for (Sach s : data) {
            bookIdJCombo.addItem(String.valueOf(s.getMaSach()) + "-" + s.getTenSach());
        }
    }

    public int getValueLeft(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i) != '-') {
            i++;
        }
        return Integer.valueOf(s.substring(0, i));
    }
}
