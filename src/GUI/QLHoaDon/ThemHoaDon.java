/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.QLHoaDon;

import BUS.ChiTietHoaDonBus;
import BUS.HoaDonBus;
import BUS.KhachHangBus;
import BUS.KhuyenMaiBus;
import BUS.SachBus;
import DTO.ChiTietHoaDon;
import DTO.HoaDon;
import DTO.KhachHang;
import DTO.KhuyenMai;
import DTO.NhanVien;
import DTO.Sach;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHTHUAN
 */
public class ThemHoaDon extends javax.swing.JFrame {

    SachBus sachbus = new SachBus();
    ChiTietHoaDonBus cthdbus = new ChiTietHoaDonBus();
    HoaDonBus hdbus = new HoaDonBus();
    KhachHangBus khbus = new KhachHangBus();
    KhuyenMaiBus kmbus = new KhuyenMaiBus();
    ArrayList<ChiTietHoaDon> data = new ArrayList<>();

    /**
     * Creates new form ThemHoaDon
     */
    public ThemHoaDon() {
        initComponents();
        initialization();

    }

    public ThemHoaDon(NhanVien nv) {
        initComponents();
        initialization();
        performEvent(nv);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        idBill = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();
        addDetail = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        numberBook = new javax.swing.JTextField();
        bookId = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        addBill = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        sumPrice = new javax.swing.JLabel();
        isEdit = new javax.swing.JCheckBox();
        cusId = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        saleId = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        idBill.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        idBill.setEnabled(false);
        background.add(idBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 414, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel1.setText("Mã hóa đơn");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 920, 364));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Chi tiết Hóa đơn");
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        refreshBtn.setBackground(new java.awt.Color(255, 255, 255));
        refreshBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(153, 51, 255));
        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/refresh_64px.png"))); // NOI18N
        refreshBtn.setText("Làm Lại");
        background.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 210, 220, -1));

        addDetail.setBackground(new java.awt.Color(255, 255, 255));
        addDetail.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        addDetail.setForeground(new java.awt.Color(153, 51, 255));
        addDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/add_50px.png"))); // NOI18N
        addDetail.setText("Cập nhật");
        background.add(addDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 210, 220, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        background.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 0, 10, 760));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel2.setText("Chọn mã sách");
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 40, -1, -1));

        numberBook.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        background.add(numberBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 120, 270, -1));

        bookId.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        background.add(bookId, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 30, 270, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel4.setText("Nhập SL:");
        background.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 120, -1, -1));

        addBill.setBackground(new java.awt.Color(255, 255, 255));
        addBill.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        addBill.setForeground(new java.awt.Color(0, 204, 0));
        addBill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/tick_box_48px.png"))); // NOI18N
        addBill.setText("Thêm Hóa Đơn");
        background.add(addBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 700, -1, -1));

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        editBtn.setForeground(new java.awt.Color(153, 51, 255));
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/edit_48px_Orange.png"))); // NOI18N
        editBtn.setText("Sửa Chi Tiết");
        background.add(editBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 700, -1, -1));

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(153, 51, 255));
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/delete_48px.png"))); // NOI18N
        deleteBtn.setText("Xóa Chi Tiết");
        background.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 700, -1, -1));

        sumPrice.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        sumPrice.setForeground(new java.awt.Color(255, 0, 51));
        sumPrice.setText("Tổng :0");
        background.add(sumPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 700, 440, 60));

        isEdit.setText("Sửa");
        isEdit.setEnabled(false);
        background.add(isEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1470, 170, -1, -1));

        cusId.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        background.add(cusId, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 410, -1));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel6.setText("Khách hàng");
        background.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        jLabel7.setText("Khuyến mãi");
        background.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        saleId.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        background.add(saleId, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 410, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 766, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemHoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemHoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemHoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemHoaDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThemHoaDon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBill;
    private javax.swing.JButton addDetail;
    private javax.swing.JPanel background;
    private javax.swing.JComboBox<String> bookId;
    private javax.swing.JComboBox<String> cusId;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField idBill;
    private javax.swing.JCheckBox isEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numberBook;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JComboBox<String> saleId;
    private javax.swing.JLabel sumPrice;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void initialization() {
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        idBill.setText(String.valueOf(hdbus.createIdAuto()));
        initTable();
        initCus();
        initSale();
        loadComboBox();
    }

    private void performEvent(NhanVien nv) {
        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (e.getActionCommand()) {
                    case "Xóa Chi Tiết": {
                        int row = table.getSelectedRow();
                        if (row < 0) {
                            JOptionPane.showMessageDialog(null, "Vui lòng chọn hàng để sửa");
                            return;
                        }
                        int id = Integer.valueOf(String.valueOf(table.getValueAt(row, 0)));

                        if (JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa chi tiết này ?", "Xác Nhận", 0) != 0) {
                            return;
                        }

                        data = cthdbus.deleteDetailOutArray(data, id);
                        loadTableData();
                        JOptionPane.showMessageDialog(null, "Xóa thành công");

                        break;
                    }
                    case "Sửa Chi Tiết": {
                        int row = table.getSelectedRow();
                        if (row < 0) {
                            JOptionPane.showMessageDialog(null, "Vui lòng chọn hàng để sửa");
                            return;
                        }
                        int id = Integer.valueOf(String.valueOf(table.getValueAt(row, 0)));
                        bookId.setSelectedItem(String.valueOf(id) + "-" + sachbus.getNameById(id));
                        numberBook.setText(String.valueOf(table.getValueAt(row, 2)));
                        disabledInput();
                        break;
                    }
                    case "Làm Lại": {
                        enabledInput();
                        numberBook.setText("");
                        bookId.setSelectedIndex(0);
                        break;
                    }
                    case "Cập nhật": {
                        if (checkInput() == false) {
                            return;
                        }
                        if (isEdit.isSelected()) {
                            if (sachbus.checkNumberBookInDB(
                                    ProcessingFunction.Other.getIdFromString(String.valueOf(bookId.getSelectedItem())),
                                    Integer.valueOf(numberBook.getText())) == false) {
                                JOptionPane.showMessageDialog(null, "Không đủ số lượng");
                                return;
                            }
                            data = cthdbus.updateNumberInArrayList(data, ProcessingFunction.Other.getIdFromString(String.valueOf(bookId.getSelectedItem())), Integer.valueOf(numberBook.getText()));
                            loadTableData();
                            JOptionPane.showMessageDialog(null, "Chỉnh sửa thành công");
                            enabledInput();
                            numberBook.setText("");
                            bookId.setSelectedIndex(0);
                            return;
                        }
                        if (sachbus.checkNumberBookInDB(
                                data,
                                ProcessingFunction.Other.getIdFromString(String.valueOf(bookId.getSelectedItem())),
                                Integer.valueOf(numberBook.getText())) == false) {
                            JOptionPane.showMessageDialog(null, "Không đủ số lượng");
                            return;
                        }

                        data = cthdbus.addDetailIntoArray(data, ProcessingFunction.Other.getIdFromString(String.valueOf(bookId.getSelectedItem())), Integer.valueOf(numberBook.getText()));
                        loadTableData();
                        JOptionPane.showMessageDialog(null, "Thêm thành công");
                        numberBook.setText("");
                        bookId.setSelectedIndex(0);
                        break;
                    }
                    case "Thêm Hóa Đơn": {
                        if (data == null || data.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Không thể thêm hóa đơn với chi tiết rỗng");
                            return;
                        }
                        for (ChiTietHoaDon ct : data) {
                            ct.setMaHoaDon(Integer.valueOf(idBill.getText()));
                        }

                        LocalDate date = LocalDate.now();
                        LocalTime time = LocalTime.now();
                        int staffId = nv.getMaNhanVien();
                        int customerId = ProcessingFunction.Other.getIdFromString(String.valueOf(cusId.getSelectedItem()));
                        int billId = Integer.valueOf(idBill.getText());
                        int idSale = ProcessingFunction.Other.getIdFromString(String.valueOf(saleId.getSelectedItem()));

                        System.out.println(idSale);

                        HoaDon hd = new HoaDon(billId, staffId, customerId, idSale, date, time, 2);

                        //Them hoa don
                        if(hdbus.insertBill(hd) == false){
                            JOptionPane.showMessageDialog(null, "Không thể thêm hóa đơn");
                            return;
                        }
                        //Them chi tiet hoa don
                        if(cthdbus.insertArrayToDB(data) == false){
                            JOptionPane.showMessageDialog(null, "Không thể thêm hóa đơn");
                            return;
                        }
                        //Tru so luong sach trong kho
                        if (sachbus.decreaseNumberBook(data) == false) {
                            JOptionPane.showMessageDialog(null, "Không thể thêm hóa đơn");
                            return;
                        }

                        JOptionPane.showMessageDialog(null, "Thêm thành công");
                        //Xoa het moi thu cap nhatj lai ma hoa don
                        idBill.setText(String.valueOf(hdbus.createIdAuto()));
                        cusId.setSelectedIndex(0);
                        saleId.setSelectedIndex(0);
                        removeAllTableData();
                        bookId.setSelectedIndex(0);
                        numberBook.setText("");
                        
                        break;
                    }
                }
            }
        };

        Arrays.stream(background.getComponents()).forEach(
                c -> {
                    if (c instanceof JButton) {
                        ((JButton) c).addActionListener(ac);
                        ((JButton) c).setActionCommand(((JButton) c).getActionCommand());
                    }
                }
        );

        saleId.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updatePrice();
            }
        });
    }

    private void initTable() {
        String[] header = {"Mã Sách", "Tên Sách", "Số Lượng", "Giá"};
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();

        Arrays.stream(header).forEach(s -> {
            defaults.addColumn(s);
        });
        table.setRowHeight(25);
    }

    private void loadComboBox() {
        ArrayList<Sach> data = sachbus.getSimplifyArrayList();
        for (Sach s : data) {
            if (s.isTrangThai() == false) {
                continue;
            }
            bookId.addItem(String.valueOf(s.getMaSach()) + "-" + s.getTenSach());
        }
    }

    private boolean checkInput() {
        try {
            if (numberBook.getText().compareTo("") == 0
                    || Integer.valueOf(numberBook.getText()) < 1) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ");
            return false;
        }
        return true;
    }

    public void loadTableData() {
        removeAllTableData();
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (ChiTietHoaDon ct : data) {
            Object[] obj = new Object[4];
            obj[0] = ct.getMaSach();
            obj[1] = sachbus.getNameById(ct.getMaSach());
            obj[2] = ct.getSoLuong();
            obj[3] = sachbus.getPriceBookFromId(ct.getMaSach());
            defaults.addRow(obj);
        }
        updatePrice();
    }

    public void removeAllTableData() {
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (int i = defaults.getRowCount() - 1; i >= 0; i--) {
            defaults.removeRow(i);
        }
    }

    public void disabledInput() {
        bookId.setEnabled(false);
        isEdit.setSelected(true);
    }

    public void enabledInput() {
        bookId.setEnabled(true);
        isEdit.setSelected(false);
    }

    private void updatePrice() {
        int sum = 0;
        int decreaseSale = kmbus.getDecreaseById(ProcessingFunction.Other.getIdFromString(String.valueOf(saleId.getSelectedItem())));
        for (ChiTietHoaDon ct : data) {
            sum += ct.getSoLuong() * sachbus.getPriceBookFromId(ct.getMaSach());
        }
        if (decreaseSale == 0) {
            sumPrice.setText("Tổng : " + ProcessingFunction.Other.convetNumberToMoney(String.valueOf(sum)));
            return;
        }
        int price = (int) (sum * (1 - decreaseSale / 100.0));

        sumPrice.setText("Tổng : "
                + ProcessingFunction.Other.convetNumberToMoney(String.valueOf(price))
                + "(" + ProcessingFunction.Other.convetNumberToMoney(String.valueOf(sum)) + ")");

    }

    private void initCus() {
        ArrayList<KhachHang> datakh = khbus.getAllData();
        for (KhachHang kh : datakh) {
            cusId.addItem(String.valueOf(kh.getMaKhachHang()) + "-" + kh.getTenKhachHang());
        }
    }

    private void initSale() {
        ArrayList<KhuyenMai> data = kmbus.getAllData();
        for (KhuyenMai km : data) {
            String date = km.getNgayApDung().toString();
            String dateSale = date.substring(8);
            String month = date.substring(5, 7);
            if (km.getMaKhuyenMai() == 1) {
                saleId.addItem(String.valueOf(km.getMaKhuyenMai()) + "-Không khuyến mãi");
                continue;
            }
            saleId.addItem(String.valueOf(km.getMaKhuyenMai()) + "-" + dateSale + "/" + month);
        }
    }
}
