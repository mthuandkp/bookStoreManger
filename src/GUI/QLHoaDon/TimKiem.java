/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.QLHoaDon;

import BUS.HoaDonBus;
import BUS.KhachHangBus;
import BUS.KhuyenMaiBus;
import GUI.QLPhieuNhap.*;
import BUS.NhaCungCapBus;
import BUS.NhanVienBus;
import BUS.PhieuNhapBus;
import DTO.HoaDon;
import DTO.KhachHang;
import DTO.KhuyenMai;
import DTO.NhaCungCap;
import DTO.NhanVien;
import DTO.PhieuNhap;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHTHUAN
 */
public class TimKiem extends javax.swing.JFrame {

    HoaDonBus hdbus = new HoaDonBus();
    KhachHangBus khbus = new KhachHangBus();
    NhanVienBus nvbus = new NhanVienBus();
    KhuyenMaiBus kmbus = new KhuyenMaiBus();

    /**
     * Creates new form TimKiem
     */
    public TimKiem() {
        initComponents();
        initialization();
        performEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idStaffSelect = new javax.swing.JComboBox<>();
        dateValue = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        billCheck = new javax.swing.JCheckBox();
        cusCheck = new javax.swing.JCheckBox();
        dateCheck = new javax.swing.JCheckBox();
        idBilltSelect = new javax.swing.JComboBox<>();
        idCusSelect = new javax.swing.JComboBox<>();
        timeValue = new javax.swing.JTextField();
        staffCheck = new javax.swing.JCheckBox();
        timeCheck = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        idSaleSelect = new javax.swing.JComboBox<>();
        saleCheck = new javax.swing.JCheckBox();
        saleCheck1 = new javax.swing.JCheckBox();
        idStatusSelect = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("Tìm kiếm phiếu nhập");

        idStaffSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        dateValue.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        find.setBackground(new java.awt.Color(255, 255, 255));
        find.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/search_50px.png"))); // NOI18N
        find.setText("Tìm kiếm");

        billCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        billCheck.setText("Mã hóa đơn");

        cusCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cusCheck.setText("Mã khách hàng");

        dateCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        dateCheck.setText("Ngày lập(yyyy/mm/dd)");

        idBilltSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        idCusSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        timeValue.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        staffCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        staffCheck.setText("Mã nhân viên");

        timeCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        timeCheck.setText("Giờ lập(h:m:s)");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        idSaleSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        saleCheck.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        saleCheck.setText("Mã giảm giá");

        saleCheck1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        saleCheck1.setText("Trạng thái");

        idStatusSelect.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cusCheck)
                    .addComponent(staffCheck)
                    .addComponent(billCheck)
                    .addComponent(saleCheck1))
                .addGap(18, 18, 18)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idStatusSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idCusSelect, 0, 209, Short.MAX_VALUE)
                    .addComponent(idStaffSelect, 0, 209, Short.MAX_VALUE)
                    .addComponent(idBilltSelect, 0, 209, Short.MAX_VALUE))
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateCheck)
                                    .addComponent(timeCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(saleCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(idSaleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(find)
                        .addGap(77, 77, 77))))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(saleCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(find)
                        .addGap(28, 28, 28))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(billCheck)
                                    .addComponent(idBilltSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(idSaleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffCheck)
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(idStaffSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateCheck)
                                .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cusCheck)
                            .addComponent(idCusSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeCheck))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saleCheck1)
                            .addComponent(idStatusSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimKiem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimKiem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JCheckBox billCheck;
    private javax.swing.JCheckBox cusCheck;
    private javax.swing.JCheckBox dateCheck;
    private javax.swing.JTextField dateValue;
    private javax.swing.JButton find;
    private javax.swing.JComboBox<String> idBilltSelect;
    private javax.swing.JComboBox<String> idCusSelect;
    private javax.swing.JComboBox<String> idSaleSelect;
    private javax.swing.JComboBox<String> idStaffSelect;
    private javax.swing.JComboBox<String> idStatusSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox saleCheck;
    private javax.swing.JCheckBox saleCheck1;
    private javax.swing.JCheckBox staffCheck;
    private javax.swing.JTable table;
    private javax.swing.JCheckBox timeCheck;
    private javax.swing.JTextField timeValue;
    // End of variables declaration//GEN-END:variables

    private void initialization() {
        this.setLocationRelativeTo(null);
        initTable();
        loadId();
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    private void performEvent() {
        find.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int idBill = 0;
                int idStaff = 0;
                int idCus = 0;
                int idSale = 0;
                String date = "";
                String time = "";
                int status = -1;

                if (billCheck.isSelected()) {
                    idBill = Integer.valueOf(String.valueOf(idBilltSelect.getSelectedItem()));
                }
                if (staffCheck.isSelected()) {
                    idStaff = Integer.valueOf(String.valueOf(idStaffSelect.getSelectedItem()));
                }
                if (cusCheck.isSelected()) {
                    idCus = Integer.valueOf(String.valueOf(idCusSelect.getSelectedItem()));
                }
                if (saleCheck.isSelected()) {
                    idSale = Integer.valueOf(String.valueOf(idSaleSelect.getSelectedItem()));
                }
                if (dateCheck.isSelected()) {
                    date = dateValue.getText();
                }
                if (timeCheck.isSelected()) {
                    time = timeValue.getText();
                }
                status = idStatusSelect.getSelectedIndex();

                if (date.compareTo("") != 0 && ProcessingFunction.check.checkValidDate(date) == false) {
                    JOptionPane.showConfirmDialog(null, "Ngày không hợp lệ");
                    return;
                }

                if (time.compareTo("")!= 0 && ProcessingFunction.check.checkValidTime(time) == false) {
                    JOptionPane.showConfirmDialog(null, "Giờ không hợp lệ");
                    return;
                }
                
                ArrayList<HoaDon> data = hdbus.searchBill(idBill, idStaff, idCus, idSale, date, time, status);
                if (data == null || data.isEmpty()) {
                    removeAllTable();
                    return;
                }
                
                loadTableData(data);
            }

            private void loadTableData(ArrayList<HoaDon> data) {
                removeAllTable();
                DefaultTableModel defaults = (DefaultTableModel) table.getModel();
                for (HoaDon hd : data) {
                    Object[] obj = new Object[7];
                    obj[0] = hd.getMaHoaDon();
                    obj[1] = hd.getMaNhanVien();
                    obj[2] = hd.getMaKhachHang();
                    obj[3] = hd.getMaKhuyenMai();
                    obj[4] = hd.getNgayLap().toString();
                    obj[5] = hd.getGioLap().toString();
                    switch (hd.getTrangThai()) {
                        case 0: {
                            obj[6] = "Đang chờ xử lý";
                            break;
                        }
                        case 1: {
                            obj[6] = "Đã xử lý";
                            break;
                        }
                        case 2: {
                            obj[6] = "Đã nhận được";
                            break;
                        }
                    }
                    defaults.addRow(obj);
                }
            }
        });
    }

    private void initTable() {
        String[] header = {"Mã hóa đơn", "Mã nhân viên", "Mã khách hàng", "Mã khuyến mãi", "Ngày lập", "Giờ lập", "Trạng thái"};
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();

        Arrays.stream(header).forEach(s -> {
            defaults.addColumn(s);
        });

        table.setRowHeight(25);
    }

    public void removeAllTable() {
        DefaultTableModel defaults = (DefaultTableModel) table.getModel();
        for (int i = defaults.getRowCount() - 1; i >= 0; i--) {
            defaults.removeRow(i);
        }
    }

    public void loadId() {
        ArrayList<HoaDon> dataHD = hdbus.getAllData();
        ArrayList<NhanVien> dataNV = nvbus.getAllData();
        ArrayList<KhachHang> dataKH = khbus.getAllData();
        ArrayList<KhuyenMai> dataKM = kmbus.getAllData();

        for (HoaDon hd : dataHD) {
            idBilltSelect.addItem(String.valueOf(hd.getMaHoaDon()));
        }
        for (NhanVien nv : dataNV) {
            idStaffSelect.addItem(String.valueOf(nv.getMaNhanVien()));
        }
        for (KhachHang kh : dataKH) {
            idCusSelect.addItem(String.valueOf(kh.getMaKhachHang()));
        }
        for (KhuyenMai km : dataKM) {
            idSaleSelect.addItem(String.valueOf(km.getMaKhuyenMai()));
        }

        idStatusSelect.addItem(String.valueOf("Chưa xử lý"));
        idStatusSelect.addItem(String.valueOf("Đã xử lý"));
        idStatusSelect.addItem(String.valueOf("Đã nhận được"));
    }
}
